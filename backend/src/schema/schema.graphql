type Query
type Mutation

scalar File
scalar DateTime

# User

type User {
  id: ID!
  givenName: String!
  familyName: String!
  email: String!
  profilePicture: String
  activated: Boolean!
  notifications(limit: Int): [Notification]
}

type PresignedUrl {
  id: ID!
  url: String
}

## Queries

extend type Query {
  user(id: ID!): User
}

extend type Query {
  userProfilePicturePresignedUrl(id: ID!): PresignedUrl
}

## Mutations

extend type Mutation {
  updateUserProfilePicture(id: ID!, image: File!): User
}

extend type Mutation {
  createUser(id: ID!, givenName: String!, familyName: String!, email: String!): User
}

extend type Mutation {
  activateUser(id: ID!): User
}

# Notification

type Notification {
  id: ID!
  userId: ID!
  journeyId: ID
  message: String!
  timestamp: DateTime!
  read: Boolean!
}

# Journeys

type Journey {
  refreshToken: String!
  from: String!
  to: String!
  departure: DateTime!
  arrival: DateTime!
  means: [String]!
  price: Float
}

## Queries

extend type Query {
  journeys(from: String!, to: String!, departure: DateTime!): [Journey]
}

# Locations

type Location {
  type: String!
  id: String!
  name: String!
}

extend type Query {
  locations(query: String!): [Location]
}
