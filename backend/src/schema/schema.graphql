type Query
type Mutation

scalar File
scalar DateTime

# User

type User {
  id: ID!
  givenName: String!
  familyName: String!
  email: String!
  profilePicture: String
  emailNotificationsEnabled: Boolean!
  notifications(limit: Int, read: Boolean): [Notification]
  journeyMonitors(limit: Int): [JourneyMonitor]
}

type PresignedUrl {
  id: ID!
  url: String
}

## Queries

extend type Query {
  user(id: ID!): User
}

extend type Query {
  userProfilePicturePresignedUrl(id: ID!): PresignedUrl
}

## Mutations

extend type Mutation {
  updateUserProfilePicture(id: ID!, image: File!): User
}

extend type Mutation {
  createUser(id: ID!, givenName: String!, familyName: String!, email: String!): User
}

extend type Mutation {
  updateUserSettings(id: ID!, emailNotificationsEnabled: Boolean!): User
}

# Notification

interface Notification {
  id: ID!
  type: ID!
  userId: ID!
  timestamp: DateTime!
  read: Boolean!
  sent: Boolean!
}

type PriceAlertNotification implements Notification {
  id: ID!
  type: ID!
  userId: ID!
  timestamp: DateTime!
  read: Boolean!
  sent: Boolean!
  journeyMonitor: JourneyMonitor!
}

type JourneyExpiryNotification implements Notification {
  id: ID!
  type: ID!
  userId: ID!
  timestamp: DateTime!
  read: Boolean!
  sent: Boolean!
  journey: Journey!
}

## Mutations

extend type Mutation {
  markNotificationAsRead(userId: ID!, notificationId: ID!): Notification
}

extend type Mutation {
  sendEmailNotification(userId: ID!, notificationId: ID!): Notification
}

# Journeys

type Journey {
  refreshToken: String!
  from: String
  to: String
  departure: DateTime
  arrival: DateTime
  means: [String]
  price: Float
}

type JourneyMonitor {
  id: ID!
  userId: ID!
  limitPrice: Float!
  expires: DateTime!
  journey: Journey
}

## Queries

extend type Query {
  journeys(from: String!, to: String!, departure: DateTime!): [Journey]
}

## Mutations

extend type Mutation {
  monitorJourney(userId: ID!, refreshToken: String!, limitPrice: Float!, expires: DateTime!): JourneyMonitor
}

extend type Mutation {
  updateJourneyMonitors: Int
}

extend type Mutation {
  updateJourneyMonitor(userId: ID!, journeyId: ID!): JourneyMonitor
}

extend type Mutation {
  deleteJourneyMonitor(userId: ID!, journeyId: ID!): JourneyMonitor
}

# Locations

type Location {
  type: String!
  id: String!
  name: String!
}

extend type Query {
  locations(query: String!): [Location]
}
